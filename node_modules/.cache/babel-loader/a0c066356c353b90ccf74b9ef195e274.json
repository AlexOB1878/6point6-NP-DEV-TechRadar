{"ast":null,"code":"var _jsxFileName = \"/Users/zeus/Desktop/Projects/6point6-NP-DEV/aoe_technology_radar/src/components/Chart/BlipPoints.tsx\";\nimport React from \"react\";\nimport { FlagType } from \"../../model\";\nimport Link from \"../Link/Link\";\nimport { ChangedBlip, DefaultBlip, NewBlip } from \"./BlipShapes\";\n\n/*\nSee https://medium.com/create-code/build-a-radar-diagram-with-d3-js-9db6458a9248\nfor a good explanation of formulas used to calculate various things in this component\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generateCoordinates(blip, xScale, yScale, config) {\n  const pi = Math.PI,\n    ringRadius = config.chartConfig.ringsAttributes[blip.ringPosition].radius,\n    previousRingRadius = blip.ringPosition === 0 ? 0 : config.chartConfig.ringsAttributes[blip.ringPosition - 1].radius,\n    ringPadding = 0.7;\n\n  // radian between 0 and 90 degrees\n  const randomDegree = Math.random() * 90 * pi / 180;\n  // random distance from the centre of the radar, but within given ring. Also, with some \"padding\" so the points don't touch ring borders.\n  const radius = randomBetween(previousRingRadius + ringPadding, ringRadius - ringPadding);\n  /* \n    Multiples of PI/2. To apply the calculated position to the specific quadrant.\n    Order here is counter-clockwise, so we need to \"invert\" quadrant positions (i.e. swap 2 with 4)\n    */\n  const shift = pi * [1, 4, 2, 3][blip.quadrantPosition - 1] / 2;\n  return {\n    x: xScale(Math.cos(randomDegree + shift) * radius),\n    y: yScale(Math.sin(randomDegree + shift) * radius)\n  };\n}\nfunction randomBetween(min, max) {\n  return Math.random() * (max - min) + min;\n}\nfunction distanceBetween(point1, point2) {\n  const a = point2.x - point1.x;\n  const b = point2.y - point1.y;\n  return Math.sqrt(a * a + b * b);\n}\nfunction renderBlip(blip, index, config) {\n  const props = {\n    blip,\n    className: \"blip\",\n    fill: blip.colour,\n    \"data-background-color\": blip.colour,\n    \"data-text-color\": blip.txtColour,\n    \"data-tip\": blip.title,\n    key: index\n  };\n  switch (blip.flag) {\n    case FlagType.new:\n      return /*#__PURE__*/_jsxDEV(NewBlip, {\n        ...props,\n        config: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }, this);\n    case FlagType.changed:\n      return /*#__PURE__*/_jsxDEV(ChangedBlip, {\n        ...props,\n        config: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 14\n      }, this);\n    default:\n      return /*#__PURE__*/_jsxDEV(DefaultBlip, {\n        ...props,\n        config: config\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 14\n      }, this);\n  }\n}\nconst BlipPoints = _ref => {\n  let {\n    items,\n    xScale,\n    yScale,\n    config\n  } = _ref;\n  const blips = items.reduce((list, item) => {\n    if (!item.ring || !item.quadrant) {\n      // skip the blip if it doesn't have a ring or quadrant assigned\n      return list;\n    }\n    const quadrantConfig = config.quadrantsMap[item.quadrant];\n    if (!quadrantConfig) {\n      return list;\n    }\n    let blip = {\n      ...item,\n      quadrantPosition: quadrantConfig.position,\n      ringPosition: config.rings.findIndex(r => r === item.ring),\n      colour: quadrantConfig.colour,\n      txtColour: quadrantConfig.txtColour,\n      coordinates: {\n        x: 0,\n        y: 0\n      }\n    };\n    let point;\n    let counter = 1;\n    let distanceBetweenCheck;\n    do {\n      const localpoint = generateCoordinates(blip, xScale, yScale, config);\n      point = localpoint;\n      counter++;\n      /*\n            Generate position of the new blip until it has a satisfactory distance to every other blip (so that they don't touch each other)\n            and quadrant borders (so that they don't overlap quadrants)\n            This feels pretty inefficient, but good enough for now.\n            */\n      distanceBetweenCheck = list.some(b => distanceBetween(localpoint, b.coordinates) < config.chartConfig.blipSize + config.chartConfig.blipSize / 2);\n    } while (counter < 100 && (Math.abs(point.x - xScale(0)) < 15 || Math.abs(point.y - yScale(0)) < 15 || distanceBetweenCheck));\n    blip.coordinates = point;\n    list.push(blip);\n    return list;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"g\", {\n    className: \"blips\",\n    children: blips.map((blip, index) => /*#__PURE__*/_jsxDEV(Link, {\n      pageName: `${blip.quadrant}/${blip.name}`,\n      children: renderBlip(blip, index, config)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_c = BlipPoints;\nexport default BlipPoints;\nvar _c;\n$RefreshReg$(_c, \"BlipPoints\");","map":{"version":3,"names":["React","FlagType","Link","ChangedBlip","DefaultBlip","NewBlip","generateCoordinates","blip","xScale","yScale","config","pi","Math","PI","ringRadius","chartConfig","ringsAttributes","ringPosition","radius","previousRingRadius","ringPadding","randomDegree","random","randomBetween","shift","quadrantPosition","x","cos","y","sin","min","max","distanceBetween","point1","point2","a","b","sqrt","renderBlip","index","props","className","fill","colour","txtColour","title","key","flag","new","changed","BlipPoints","items","blips","reduce","list","item","ring","quadrant","quadrantConfig","quadrantsMap","position","rings","findIndex","r","coordinates","point","counter","distanceBetweenCheck","localpoint","some","blipSize","abs","push","map","name"],"sources":["/Users/zeus/Desktop/Projects/6point6-NP-DEV/aoe_technology_radar/src/components/Chart/BlipPoints.tsx"],"sourcesContent":["import { ScaleLinear } from \"d3\";\nimport React from \"react\";\n\nimport { ConfigData } from \"../../config\";\nimport { Blip, FlagType, Item, Point } from \"../../model\";\nimport Link from \"../Link/Link\";\nimport { ChangedBlip, DefaultBlip, NewBlip } from \"./BlipShapes\";\n\n/*\nSee https://medium.com/create-code/build-a-radar-diagram-with-d3-js-9db6458a9248\nfor a good explanation of formulas used to calculate various things in this component\n*/\n\nfunction generateCoordinates(\n  blip: Blip,\n  xScale: ScaleLinear<number, number>,\n  yScale: ScaleLinear<number, number>,\n  config: ConfigData\n): Point {\n  const pi = Math.PI,\n    ringRadius = config.chartConfig.ringsAttributes[blip.ringPosition].radius,\n    previousRingRadius =\n      blip.ringPosition === 0\n        ? 0\n        : config.chartConfig.ringsAttributes[blip.ringPosition - 1].radius,\n    ringPadding = 0.7;\n\n  // radian between 0 and 90 degrees\n  const randomDegree = (Math.random() * 90 * pi) / 180;\n  // random distance from the centre of the radar, but within given ring. Also, with some \"padding\" so the points don't touch ring borders.\n  const radius = randomBetween(\n    previousRingRadius + ringPadding,\n    ringRadius - ringPadding\n  );\n  /* \n    Multiples of PI/2. To apply the calculated position to the specific quadrant.\n    Order here is counter-clockwise, so we need to \"invert\" quadrant positions (i.e. swap 2 with 4)\n    */\n  const shift = (pi * [1, 4, 2, 3][blip.quadrantPosition - 1]) / 2;\n\n  return {\n    x: xScale(Math.cos(randomDegree + shift) * radius),\n    y: yScale(Math.sin(randomDegree + shift) * radius),\n  };\n}\n\nfunction randomBetween(min: number, max: number): number {\n  return Math.random() * (max - min) + min;\n}\n\nfunction distanceBetween(point1: Point, point2: Point): number {\n  const a = point2.x - point1.x;\n  const b = point2.y - point1.y;\n  return Math.sqrt(a * a + b * b);\n}\n\nfunction renderBlip(\n  blip: Blip,\n  index: number,\n  config: ConfigData\n): JSX.Element {\n  const props = {\n    blip,\n    className: \"blip\",\n    fill: blip.colour,\n    \"data-background-color\": blip.colour,\n    \"data-text-color\": blip.txtColour,\n    \"data-tip\": blip.title,\n    key: index,\n  };\n  switch (blip.flag) {\n    case FlagType.new:\n      return <NewBlip {...props} config={config} />;\n    case FlagType.changed:\n      return <ChangedBlip {...props} config={config} />;\n    default:\n      return <DefaultBlip {...props} config={config} />;\n  }\n}\n\nconst BlipPoints: React.FC<{\n  items: Item[];\n  xScale: ScaleLinear<number, number>;\n  yScale: ScaleLinear<number, number>;\n  config: ConfigData;\n}> = ({ items, xScale, yScale, config }) => {\n  const blips: Blip[] = items.reduce((list: Blip[], item: Item) => {\n    if (!item.ring || !item.quadrant) {\n      // skip the blip if it doesn't have a ring or quadrant assigned\n      return list;\n    }\n    const quadrantConfig = config.quadrantsMap[item.quadrant];\n    if (!quadrantConfig) {\n      return list;\n    }\n\n    let blip: Blip = {\n      ...item,\n      quadrantPosition: quadrantConfig.position,\n      ringPosition: config.rings.findIndex((r) => r === item.ring),\n      colour: quadrantConfig.colour,\n      txtColour: quadrantConfig.txtColour,\n      coordinates: { x: 0, y: 0 },\n    };\n\n    let point: Point;\n    let counter = 1;\n    let distanceBetweenCheck: boolean;\n    do {\n      const localpoint = generateCoordinates(blip, xScale, yScale, config);\n      point = localpoint;\n      counter++;\n      /*\n            Generate position of the new blip until it has a satisfactory distance to every other blip (so that they don't touch each other)\n            and quadrant borders (so that they don't overlap quadrants)\n            This feels pretty inefficient, but good enough for now.\n            */\n      distanceBetweenCheck = list.some(\n        (b) =>\n          distanceBetween(localpoint, b.coordinates) <\n          config.chartConfig.blipSize + config.chartConfig.blipSize / 2\n      );\n    } while (\n      counter < 100 &&\n      (Math.abs(point.x - xScale(0)) < 15 ||\n        Math.abs(point.y - yScale(0)) < 15 ||\n        distanceBetweenCheck)\n    );\n\n    blip.coordinates = point;\n\n    list.push(blip);\n    return list;\n  }, []);\n\n  return (\n    <g className=\"blips\">\n      {blips.map((blip, index) => (\n        <Link pageName={`${blip.quadrant}/${blip.name}`} key={index}>\n          {renderBlip(blip, index, config)}\n        </Link>\n      ))}\n    </g>\n  );\n};\n\nexport default BlipPoints;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}