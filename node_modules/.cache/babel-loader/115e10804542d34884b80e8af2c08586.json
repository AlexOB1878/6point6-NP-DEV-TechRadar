{"ast":null,"code":"var _jsxFileName = \"/Users/zeus/Desktop/Projects/6point6-NP-DEV/aoe_technology_radar/src/components/Chart/BlipShapes.tsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChangedBlip = _ref => {\n  let {\n    blip,\n    config,\n    ...props\n  } = _ref;\n  const centeredX = blip.coordinates.x - config.chartConfig.blipSize / 2,\n    centeredY = blip.coordinates.y - config.chartConfig.blipSize / 2;\n  return /*#__PURE__*/_jsxDEV(\"rect\", {\n    transform: `rotate(-45 ${centeredX} ${centeredY})`,\n    x: centeredX,\n    y: centeredY,\n    width: config.chartConfig.blipSize,\n    height: config.chartConfig.blipSize,\n    rx: \"3\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_c = ChangedBlip;\nexport const NewBlip = _ref2 => {\n  let {\n    blip,\n    config,\n    ...props\n  } = _ref2;\n  const centeredX = blip.coordinates.x - config.chartConfig.blipSize / 2,\n    centeredY = blip.coordinates.y - config.chartConfig.blipSize / 2;\n\n  /*\n    The below is a predefined path of a triangle with rounded corners.\n    I didn't find any more human friendly way of doing this as all examples I found have tons of lines of code\n    e.g. https://observablehq.com/@perlmonger42/interactive-rounded-corners-on-svg-polygons-using-d3-js\n    */\n  return /*#__PURE__*/_jsxDEV(\"path\", {\n    transform: `translate(${centeredX}, ${centeredY})`,\n    d: \"M.247 10.212l5.02-8.697a2 2 0 013.465 0l5.021 8.697a2 2 0 01-1.732 3H1.98a2 2 0 01-1.732-3z\",\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c2 = NewBlip;\nexport const DefaultBlip = _ref3 => {\n  let {\n    blip,\n    config,\n    ...props\n  } = _ref3;\n  return /*#__PURE__*/_jsxDEV(\"circle\", {\n    r: config.chartConfig.blipSize / 2,\n    cx: blip.coordinates.x,\n    cy: blip.coordinates.y,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_c3 = DefaultBlip;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ChangedBlip\");\n$RefreshReg$(_c2, \"NewBlip\");\n$RefreshReg$(_c3, \"DefaultBlip\");","map":{"version":3,"names":["React","ChangedBlip","blip","config","props","centeredX","coordinates","x","chartConfig","blipSize","centeredY","y","NewBlip","DefaultBlip"],"sources":["/Users/zeus/Desktop/Projects/6point6-NP-DEV/aoe_technology_radar/src/components/Chart/BlipShapes.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { ConfigData } from \"../../config\";\nimport { Blip } from \"../../model\";\n\ntype VisualBlipProps = {\n  className: string;\n  fill: string;\n  \"data-background-color\": string;\n  \"data-text-color\": string;\n  \"data-tip\": string;\n  key: number;\n};\n\nexport const ChangedBlip: React.FC<\n  { blip: Blip; config: ConfigData } & VisualBlipProps\n> = ({ blip, config, ...props }) => {\n  const centeredX = blip.coordinates.x - config.chartConfig.blipSize / 2,\n    centeredY = blip.coordinates.y - config.chartConfig.blipSize / 2;\n\n  return (\n    <rect\n      transform={`rotate(-45 ${centeredX} ${centeredY})`}\n      x={centeredX}\n      y={centeredY}\n      width={config.chartConfig.blipSize}\n      height={config.chartConfig.blipSize}\n      rx=\"3\"\n      {...props}\n    />\n  );\n};\n\nexport const NewBlip: React.FC<\n  { blip: Blip; config: ConfigData } & VisualBlipProps\n> = ({ blip, config, ...props }) => {\n  const centeredX = blip.coordinates.x - config.chartConfig.blipSize / 2,\n    centeredY = blip.coordinates.y - config.chartConfig.blipSize / 2;\n\n  /*\n    The below is a predefined path of a triangle with rounded corners.\n    I didn't find any more human friendly way of doing this as all examples I found have tons of lines of code\n    e.g. https://observablehq.com/@perlmonger42/interactive-rounded-corners-on-svg-polygons-using-d3-js\n    */\n  return (\n    <path\n      transform={`translate(${centeredX}, ${centeredY})`}\n      d=\"M.247 10.212l5.02-8.697a2 2 0 013.465 0l5.021 8.697a2 2 0 01-1.732 3H1.98a2 2 0 01-1.732-3z\"\n      {...props}\n    />\n  );\n};\n\nexport const DefaultBlip: React.FC<\n  { blip: Blip; config: ConfigData } & VisualBlipProps\n> = ({ blip, config, ...props }) => {\n  return (\n    <circle\n      r={config.chartConfig.blipSize / 2}\n      cx={blip.coordinates.x}\n      cy={blip.coordinates.y}\n      {...props}\n    />\n  );\n};\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAc1B,OAAO,MAAMC,WAEZ,GAAG,QAAgC;EAAA,IAA/B;IAAEC,IAAI;IAAEC,MAAM;IAAE,GAAGC;EAAM,CAAC;EAC7B,MAAMC,SAAS,GAAGH,IAAI,CAACI,WAAW,CAACC,CAAC,GAAGJ,MAAM,CAACK,WAAW,CAACC,QAAQ,GAAG,CAAC;IACpEC,SAAS,GAAGR,IAAI,CAACI,WAAW,CAACK,CAAC,GAAGR,MAAM,CAACK,WAAW,CAACC,QAAQ,GAAG,CAAC;EAElE,oBACE;IACE,SAAS,EAAG,cAAaJ,SAAU,IAAGK,SAAU,GAAG;IACnD,CAAC,EAAEL,SAAU;IACb,CAAC,EAAEK,SAAU;IACb,KAAK,EAAEP,MAAM,CAACK,WAAW,CAACC,QAAS;IACnC,MAAM,EAAEN,MAAM,CAACK,WAAW,CAACC,QAAS;IACpC,EAAE,EAAC,GAAG;IAAA,GACFL;EAAK;IAAA;IAAA;IAAA;EAAA,QACT;AAEN,CAAC;AAAC,KAjBWH,WAEZ;AAiBD,OAAO,MAAMW,OAEZ,GAAG,SAAgC;EAAA,IAA/B;IAAEV,IAAI;IAAEC,MAAM;IAAE,GAAGC;EAAM,CAAC;EAC7B,MAAMC,SAAS,GAAGH,IAAI,CAACI,WAAW,CAACC,CAAC,GAAGJ,MAAM,CAACK,WAAW,CAACC,QAAQ,GAAG,CAAC;IACpEC,SAAS,GAAGR,IAAI,CAACI,WAAW,CAACK,CAAC,GAAGR,MAAM,CAACK,WAAW,CAACC,QAAQ,GAAG,CAAC;;EAElE;AACF;AACA;AACA;AACA;EACE,oBACE;IACE,SAAS,EAAG,aAAYJ,SAAU,KAAIK,SAAU,GAAG;IACnD,CAAC,EAAC,6FAA6F;IAAA,GAC3FN;EAAK;IAAA;IAAA;IAAA;EAAA,QACT;AAEN,CAAC;AAAC,MAlBWQ,OAEZ;AAkBD,OAAO,MAAMC,WAEZ,GAAG,SAAgC;EAAA,IAA/B;IAAEX,IAAI;IAAEC,MAAM;IAAE,GAAGC;EAAM,CAAC;EAC7B,oBACE;IACE,CAAC,EAAED,MAAM,CAACK,WAAW,CAACC,QAAQ,GAAG,CAAE;IACnC,EAAE,EAAEP,IAAI,CAACI,WAAW,CAACC,CAAE;IACvB,EAAE,EAAEL,IAAI,CAACI,WAAW,CAACK,CAAE;IAAA,GACnBP;EAAK;IAAA;IAAA;IAAA;EAAA,QACT;AAEN,CAAC;AAAC,MAXWS,WAEZ;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}